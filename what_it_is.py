#!/bin/python

"""
    Autor: Oscar Espinosa C
    Script que obtiene el SO de la direccion IP dada,
    ya sea Windows o Linux, basandose en sus TTL por defecto.

"""

from subprocess import check_output, CalledProcessError
import argparse
import sys
from re import search

windows_OS = 128
unix64_OS = 64
unix254_OS = 254

parser = argparse.ArgumentParser()
#Argumento posicional para el script
parser.add_argument("target", help="The host to check its OS")
parser.add_argument("-f", "--file", action='store_true',
	help="This flag says that the argument is a file")
args = parser.parse_args()


def do_ping(host):
	"""
		Funcion para hacer ping con una llamada al sistema
		Devuelve lo que devuelve la ejecucion del ping
	"""
	stdout = check_output(["ping", host,"-c", "1", "-w", "1"])
	return stdout

def get_ttl(stdout):
	""" De la salida del comando ping, obtiene el campo que
		nos dice el TTL del mensaje ICMP devuelto por el servidor

		Devuelve el valor de este TTL
	"""
	ttl = search('(ttl=..)', stdout)
	return ttl.group(1)

def get_OS(ttl):
	"""
		Funcion que compara el TTL devuelto por el servidor con los
		TTL por defecto de cada SO
		Devuelve un string que dice el posible SO en el servidor
	"""
	min_d = unix254_OS - ttl
	is_like = "unix254"
	
	a = windows_OS - ttl
	if a < min_d:
		min_d = a 
		is_like = "windows"
	
	a = unix64_OS - ttl
	if a < min_d:
		min_d = a 
		is_like = "unix64"
	
	return is_like

def result(target, is_like):
	"""
		Imprime el SO que puede ser el servidor dado
	"""
	if is_like == "unix64" or is_like == "unix254":
		return "El sitio {} es un SO *nix".format(target)
	else:
		return "El sitio {} es un SO Windows".format(target)

def check_OS(target):
	"""
		Funcion que intenta deducir que SO es el que se maneja del
		lado del servidor. Recibe la IP del servidor a probar
	"""
	try:
		std = do_ping(target)
		ttl = get_ttl(std).split("=")[1]
		is_like = get_OS(int(ttl))
		return result(target, is_like)

	except  CalledProcessError as cpe:
		if cpe.output != "":
			print "Es probable que el sitio " + target + " tenga deshabilitado el protocolo ICMP"
		else:
			print "El sitio" + target + " no existe o no es alcanzable"


def what_is():
	"""
		Funcion principal del script
	"""
	if args.file:
		try:
			with open(args.target, "r") as target_file:
				#Se recorre el archivo para buscar cada IP
				one_target = target_file.readline()[:-1]
				while one_target:
					print check_OS(one_target)
					one_target = target_file.readline()[:-1	]

		except IOError:
			print "Error al abrir el archivo " + args.target

	else:
		print check_OS(args.target)

if __name__ == '__main__':

	what_is()

